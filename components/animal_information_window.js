import WarmingUpGame from './minigames/warming_up_game.js';
import DivingGame from './minigames/diving_game.js';

export default {
  props: [
    'pluginDirUrl',
    'selectedEntity',
    'animal',
    'buyingAnimalId',
    'userPoints',
  ],
  template: `
  <div 
  id="custom-infobox-container" 
  :class="{ 'custom-infoBox': true, 'custom-infoBox-visible': selectedEntity }" 
  :style="{ height: (animal.is_owned && selectedEntity?.isFirst) ? '80vh' : '' }"
  v-show="!MiniGame"
  >
    <div class="custom-infobox-content">
      <div v-if="selectedEntity.isFirst" class="animal-info">
        <div class="custom-infobox-content">
          <div class="side-bar-wrapper">
            <div class="side-bar-content">
              <div class="side-bar-animal-picture-container">
                <div class="side-bar-animal-picture">
                  <div class="animal-image-container">
                    <img class="animal_image" :src="animal.picture" @load="adjustOverlayBackground">
                    <div v-if="!animal.is_active" class="battery-warning-animal-info">
                      <img :src="pluginDirUrl + '/media/battery_empty_battery.png'" alt="Low Battery">
                    </div>
                  </div>
                  <button class="side-bar-close" @click="closeInfobox">âœ•</button>
                  <div class="side-bar-animal-details" ref="animalDetails">
                    <div class="side-bar-animal-details-name">{{ animal.name }}</div>
                    <div class="side-bar-animal-details-small">{{ animal.species }}</div>
                  </div>
                  <div class="last-location-wrapper" ref="lastLocationWrapper">
                    <div class="last-location-label-background"></div>
                    <div class="last-location-label-text">
                      <template v-if="animal.is_owned">
                        <mat-icon class="last-location-mat-icon" role="img" aria-hidden="true" data-mat-icon-type="svg" data-mat-icon-name="ping">
                          <svg
                            class="last-location-svg"
                            version="1.1"
                            xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            x="0px"
                            y="0px"
                            viewBox="0 0 30 30"
                            xml:space="preserve"
                            fit=""
                            height="100%"
                            width="100%"
                            preserveAspectRatio="xMidYMid meet"
                            focusable="false"
                          >
                            <path
                              fill="#fff"
                              d="M15,0C6.7,0,0,6.7,0,15c0,8.3,6.7,15,15,15c8.3,0,15-6.7,15-15c0,0,0,0,0,0C30,6.7,23.3,0,15,0z M29.6,15 c0,8-6.5,14.5-14.6,14.5C6.9,29.5,0.4,23,0.4,15C0.5,6.9,7,0.4,15,0.4C23.1,0.5,29.6,7,29.6,15C29.6,15,29.6,15,29.6,15z"
                            ></path>
                            <path
                              fill="#fff"
                              d="M15,3C8.4,3,3,8.4,3,15c0,6.6,5.3,12,12,12c6.6,0,12-5.3,12-12c0,0,0,0,0,0C27,8.4,21.6,3,15,3z M25.8,15 c0,5.9-4.8,10.8-10.8,10.7C9,25.8,4.2,20.9,4.2,15C4.2,9,9.1,4.2,15,4.2C21,4.2,25.8,9.1,25.8,15C25.8,15,25.8,15,25.8,15z"
                            ></path>
                            <path fill="#fff" d="M15,7c-4.4,0-8,3.5-8,7.9c0,4.4,3.5,8,7.9,8c4.4,0,8-3.5,8-7.9c0,0,0,0,0,0C23,10.6,19.4,7.1,15,7z"></path>
                          </svg>
                        </mat-icon>
                      </template>
                      <template v-else>
                        <img :src="pluginDirUrl + '/media/release_animal.webp'" alt="Release Animal Icon" class="release-animal-icon" />
                      </template>
                      <span>{{ formatDate(selectedEntity.dt_move) }}</span>
                    </div>

                  </div>
                </div>
              </div>
              <div v-if="animal.is_owned" class="side-bar-animal-info-wrapper">
                <div class="tab">
                  <button class="tablinks tabButton active" id="defaultOpen" data-tab="Info" @click="openTab($event, 'Info')">
                    <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="156" height="162" viewBox="0 0 156 162">
                      <path style="stroke-width: 2;" d="M69.692 0.830501C74.2483 0.287397 81.96 0.385012 86.5366 0.930413Q88.4367 1.17317 90.323 1.50716Q92.2092 1.84115 94.0771 2.2656Q95.9451 2.69005 97.7904 3.20399Q99.6358 3.71792 101.454 4.32013Q103.273 4.92235 105.06 5.61145Q106.847 6.30055 108.599 7.07494Q110.351 7.84933 112.064 8.70721Q113.777 9.56509 115.446 10.5045Q117.116 11.4438 118.738 12.4625Q120.36 13.4812 121.932 14.5769Q123.503 15.6725 125.02 16.8426Q126.536 18.0126 127.995 19.2544Q129.453 20.4962 130.851 21.8067Q132.248 23.1173 133.58 24.4936Q134.912 25.8699 136.177 27.3089Q137.441 28.7478 138.635 30.2459C146.826 40.7031 152.832 53.9826 154.271 67.2609C154.653 70.7759 154.541 74.3549 154.541 77.8871C154.541 81.5864 154.626 85.2974 154.174 88.9762C151.76 108.644 140.45 126.757 124.972 138.843Q123.507 139.983 121.989 141.05Q120.471 142.117 118.902 143.109Q117.334 144.101 115.719 145.016Q114.104 145.93 112.447 146.766Q110.79 147.601 109.094 148.355Q107.398 149.109 105.668 149.779Q103.938 150.45 102.177 151.036Q100.416 151.622 98.6286 152.122Q96.8413 152.621 95.0319 153.034Q93.2225 153.446 91.3951 153.77Q89.5678 154.094 87.7269 154.329Q85.8861 154.564 84.0359 154.709Q82.1858 154.854 80.3308 154.91Q78.4758 154.965 76.6204 154.93Q74.7649 154.895 72.9133 154.77Q71.0617 154.646 69.2183 154.431C64.0093 153.666 58.9127 152.651 53.8763 151.096C51.6389 150.405 48.635 148.459 46.4029 148.517C42.4528 148.621 23.4674 161.478 19.8806 161.301C19.0632 161.26 18.2883 160.936 17.7532 160.305C17.1873 159.639 16.9734 158.895 16.9801 158.031C16.9959 155.993 17.6826 153.793 17.9897 151.764C19.0348 144.859 20.6717 136.782 21.238 130.003C11.3151 118.454 4.53378 106.109 2.08358 90.9058C1.3878 86.5887 1.3842 82.3689 1.38253 78.0127C1.38134 74.9005 1.25344 71.7017 1.54522 68.604C2.75878 55.7199 8.11692 42.9081 15.66 32.47C28.913 14.1305 47.676 4.36722 69.692 0.830501ZM75.2818 7.11026C55.9422 7.93292 38.5139 16.1704 25.4339 30.4139C13.4176 43.4993 6.3719 62.2283 7.16231 80.0378C7.76902 93.7082 12.0145 107.306 20.0148 118.471C22.2441 121.582 25.7922 124.987 27.655 127.981C27.4123 134.346 25.9942 141.026 24.9792 147.331C24.7997 148.446 24.0358 150.69 24.0785 151.594C24.0841 151.713 24.2233 151.962 24.2711 152.083C25.8534 152.473 42.3689 142.543 46.2391 141.4C54.0978 144.28 58.6944 146.433 67.2966 147.919C87.7863 150.274 105.889 145.913 122.173 132.972Q123.532 131.898 124.837 130.759Q126.141 129.619 127.388 128.416Q128.634 127.213 129.819 125.95Q131.005 124.687 132.126 123.367Q133.247 122.046 134.302 120.672Q135.356 119.298 136.342 117.873Q137.327 116.449 138.24 114.977Q139.154 113.505 139.993 111.99Q140.833 110.475 141.596 108.92Q142.36 107.365 143.045 105.775Q143.731 104.184 144.337 102.561Q144.943 100.938 145.467 99.2876Q145.992 97.6369 146.435 95.9621Q146.877 94.2874 147.236 92.5929Q147.595 90.8983 147.87 89.188Q148.144 87.4778 148.334 85.756Q148.533 84.0386 148.647 82.3135Q148.762 80.5884 148.791 78.8598Q148.82 77.1312 148.764 75.4032Q148.709 73.6752 148.568 71.9521Q148.427 70.229 148.202 68.5148Q147.976 66.8007 147.667 65.0998Q147.357 63.3988 146.965 61.7151Q146.572 60.0314 146.097 58.3691Q145.622 56.7068 145.066 55.0699Q144.509 53.4329 143.873 51.8254Q143.237 50.2178 142.522 48.6434Q141.808 47.0691 141.017 45.5318Q140.226 43.9946 139.36 42.4981Q138.494 41.0016 137.556 39.5495Q136.618 38.0974 135.609 36.6932Q134.6 35.289 133.524 33.9362C122.094 19.5799 105.114 9.6219 86.7923 7.54408Q81.0546 6.86187 75.2818 7.11026Z"/>
                      <path style="stroke-width: 2;" d="M75.4587 23.0627C79.8367 22.6106 84.1276 23.4618 87.7115 26.1224Q88.3342 26.5936 88.9079 27.1235Q89.4815 27.6533 90.0006 28.2368Q90.5196 28.8203 90.9791 29.4517Q91.4386 30.0831 91.8341 30.7565Q92.2295 31.4299 92.5572 32.1387Q92.8849 32.8476 93.1417 33.5851Q93.3985 34.3226 93.5819 35.0816Q93.7653 35.8407 93.8735 36.6141Q93.9907 37.4224 94.0275 38.2384Q94.0643 39.0543 94.0202 39.8699Q93.9762 40.6855 93.8517 41.4927Q93.7273 42.3 93.5237 43.0909Q93.3201 43.8819 93.0393 44.6489Q92.7585 45.4159 92.4033 46.1514Q92.0481 46.8869 91.6219 47.5837Q91.1957 48.2804 90.7028 48.9317Q90.244 49.5344 89.7288 50.0896Q89.2136 50.6449 88.6468 51.1474Q88.0801 51.6499 87.4671 52.0949Q86.8542 52.5399 86.2009 52.9232Q85.5476 53.3065 84.8601 53.6244Q84.1726 53.9423 83.4574 54.1919Q82.7423 54.4415 82.0063 54.6203Q81.2702 54.7992 80.5203 54.9056C76.6279 55.4533 72.7079 54.748 69.3592 52.6386Q68.6953 52.2209 68.0762 51.7393Q67.457 51.2578 66.8887 50.7172Q66.3203 50.1766 65.8085 49.5822Q65.2966 48.9879 64.8462 48.3457Q64.3958 47.7036 64.0113 47.0199Q63.6269 46.3362 63.3121 45.6177Q62.9974 44.8993 62.7555 44.1531Q62.5136 43.407 62.3469 42.6405Q62.1728 41.8376 62.0774 41.0217Q61.9819 40.2057 61.966 39.3844Q61.95 38.563 62.0138 37.744Q62.0775 36.9249 62.2202 36.1159Q62.363 35.3069 62.5835 34.5155Q62.804 33.7241 63.1001 32.9578Q63.3963 32.1916 63.7653 31.4576Q64.1342 30.7236 64.5726 30.0288C67.1908 25.9262 70.863 24.0961 75.4587 23.0627ZM76.6619 29.3309C74.0417 29.6583 71.7191 30.8928 70.0905 33.0043Q69.7951 33.3949 69.5396 33.8127Q69.2841 34.2304 69.0711 34.6714Q68.858 35.1123 68.6894 35.572Q68.5208 36.0318 68.3984 36.506Q68.2759 36.9801 68.2008 37.464Q68.1256 37.9479 68.0985 38.4369Q68.0714 38.9258 68.0926 39.4151Q68.1139 39.9043 68.1832 40.3891Q68.2499 40.8741 68.3644 41.3501Q68.4788 41.826 68.6399 42.2883Q68.801 42.7506 69.0072 43.1946Q69.2133 43.6387 69.4624 44.0601Q69.7116 44.4815 70.0013 44.8761Q70.291 45.2707 70.6184 45.6347Q70.9458 45.9986 71.3077 46.3283Q71.6696 46.658 72.0624 46.9502C74.1649 48.5025 76.8469 49.1487 79.4293 48.9004C82.645 47.8754 85.1906 46.571 86.819 43.4281Q87.0407 42.9931 87.2188 42.5384Q87.3969 42.0838 87.5297 41.6139Q87.6624 41.144 87.7486 40.6633Q87.8347 40.1827 87.8733 39.6959Q87.912 39.2092 87.9028 38.721Q87.8937 38.2327 87.8368 37.7478Q87.7799 37.2628 87.6758 36.7858Q87.5717 36.3087 87.4214 35.8441Q87.2753 35.4002 87.0861 34.9729Q86.8969 34.5455 86.6664 34.139Q86.4359 33.7324 86.1665 33.3505Q85.897 32.9687 85.5912 32.6153Q85.2854 32.2619 84.9462 31.9404Q84.607 31.6189 84.2377 31.3325Q83.8685 31.046 83.4728 30.7974Q83.077 30.5488 82.6587 30.3404C80.7672 29.3933 78.7506 29.1567 76.6619 29.3309Z"/>
                      <path style="stroke-width: 2;" d="M58.8208 60.3067Q59.2297 60.2568 59.6403 60.2243C64.6318 59.8481 69.8209 60.1294 74.8391 60.1305C79.4111 60.1316 84.1707 59.8394 88.7108 60.2266C89.5125 60.2949 91.0658 60.4434 91.6734 61.0125C92.1793 61.4863 92.2199 63.9527 92.2546 64.7328C92.5128 70.5346 92.299 76.4444 92.2994 82.2606Q92.3394 97.447 92.2261 112.633C93.9083 112.654 96.6322 112.406 97.961 113.612C98.7088 114.29 98.8759 116.224 98.9289 117.168C99.0588 119.481 99.6074 126.632 97.8704 128.407C96.4934 129.814 91.8571 129.268 89.9375 129.231C85.6956 129.212 59.4645 129.889 57.8821 128.325C56.6205 127.078 57.0197 119.429 57.0182 117.294C57.0174 116.104 57.1133 114.626 58.0318 113.753C59.4484 112.408 61.7511 112.757 63.5371 112.833Q63.7231 102.17 63.6678 91.5055C63.6666 86.5027 63.7891 81.4595 63.587 76.4626C62.3679 76.5108 61.0568 76.6293 59.8489 76.4476C59.06 76.3289 58.1466 76.0061 57.6787 75.3248C56.5886 73.7373 56.85 64.4713 57.2955 62.4117C57.5285 61.3349 57.9245 60.8787 58.8208 60.3067ZM63.4876 66.1811L63.3218 70.0942C64.9492 70.0395 67.5702 69.6625 68.8417 70.8793C70.1492 72.1305 69.7594 76.5593 69.7551 78.3489L69.7251 103.686C69.7316 107.918 70.168 112.631 69.5739 116.808C69.496 117.357 69.1681 117.847 68.7901 118.239C68.2026 118.85 67.3406 119.093 66.5108 119.089C65.5467 119.085 64.5488 118.93 63.5882 118.831L63.2794 122.766C71.1193 122.889 78.9712 122.809 86.8125 122.808L92.5161 122.907L92.4711 118.922C90.6993 119.015 88.5241 119.447 87.0833 118.177C86.2483 117.441 86.304 116.029 86.2617 115.004C85.9563 107.605 86.2683 100.087 86.2699 92.6752C86.2718 83.9113 85.9948 75.0475 86.4323 66.2961L71.6155 66.3568C68.9906 66.3691 66.0612 66.667 63.4876 66.1811Z"/>
                    </svg>
                    Info
                  </button>
                  <button class="tablinks tabButton" data-tab="Story" @click="openTab($event, 'Story')">
                    <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="197" height="166" viewBox="0 0 197 166">
                      <path d="M0 0L196.562 0C196.878 0.50053 196.957 0.911203 196.98 1.49248C197.424 12.6364 197.018 24.8006 197.015 36.0483C197.013 39.5604 197.433 49.0321 196.9 51.7486C196.868 51.9144 196.807 52.0754 196.741 52.2303C197.504 54.6359 197.005 76.2822 197.006 81.0727C197.008 107.039 197.267 133.035 196.995 158.999C196.987 159.701 197.026 160.39 196.706 161.035C196.669 161.109 196.626 161.179 196.584 161.25C197.187 162.277 197.196 164.231 196.871 165.373C196.807 165.601 196.697 165.806 196.562 166L0 166L0 161.212L0 52.6063L0 0ZM0 0L0 52.6063L0.67687 52.0906C0.882919 51.3465 1.07436 50.5667 1.59708 49.9744C2.36799 49.1009 3.64464 48.7012 4.76457 48.5106C9.00973 47.788 16.9498 48.5431 21.7202 48.3571C21.6407 44.8607 21.1315 40.6525 21.8402 37.242C22.0576 36.196 22.5056 34.8989 23.4594 34.314C25.7342 32.9192 30.5546 33.776 33.1792 33.8472Q39.3582 34.0457 45.5098 34.6607Q51.6614 35.2757 57.7574 36.3045Q63.8535 37.3332 69.8662 38.771Q75.8789 40.2087 81.7809 42.049C87.3932 43.8019 92.892 46.5379 98.5448 48.0016C107.328 44.0837 116.77 41.351 126.086 39.0246Q135.513 36.6897 145.135 35.3738Q154.757 34.058 164.465 33.7761C167.064 33.6896 171.125 33.0926 173.384 34.5142C174.225 35.0435 174.641 35.9044 174.868 36.8418C175.301 38.6322 175.446 46.8267 174.571 48.2478C178.947 48.5374 191.379 47.5723 194.467 49.265C195.624 49.899 196.018 50.7637 196.374 51.9592L196.741 52.2303C196.807 52.0754 196.868 51.9144 196.9 51.7486C197.433 49.0321 197.013 39.5604 197.015 36.0483C197.018 24.8006 197.424 12.6364 196.98 1.49248C196.957 0.911203 196.878 0.50053 196.562 0L0 0ZM160.385 42.0986C143.361 43.4469 126.885 46.531 110.785 52.3087C108.555 53.1089 105.119 54.0277 103.226 55.3727C102.773 55.9601 102.775 56.8777 102.744 57.592C102.473 63.7948 102.81 70.1541 102.809 76.376L102.805 127.736C102.807 136.798 103.187 146.058 102.695 155.101C104.615 154.561 106.483 153.841 108.329 153.091C128.173 146.398 145.753 143.197 166.686 142.188C167.554 140.568 167.063 121.666 167.062 118.645L167.043 60.0157C167.042 57.3076 167.427 44.0989 166.953 42.521C166.883 42.2906 166.778 42.088 166.648 41.8857L160.385 42.0986ZM30.0227 41.927L30.0215 107.204C30.0215 118.817 30.2102 130.46 29.9697 142.068C48.1156 143.126 65.1731 145.584 82.549 151.122C84.7122 151.811 92.7852 155.178 94.3298 154.968C93.8913 130.723 94.2681 106.412 94.2642 82.1587L94.2745 63.867C94.2856 61.0521 94.4991 58.1441 94.3572 55.3417C78.3752 48.9731 62.398 44.7954 45.2791 42.9876C40.1995 42.4511 35.0797 42.445 30.0227 41.927ZM8.99977 56.6171C8.73519 65.6802 8.92864 74.7947 8.93015 83.8628L8.94321 133.175C8.94735 141.137 9.11185 149.136 8.85798 157.091L59.3754 157.048C62.2303 157.054 70.4458 157.821 72.6174 157.264C72.1695 156.674 71.9491 156.5 71.2463 156.224C67.3562 154.697 55.2184 152.929 50.6156 152.295C45.9517 151.653 41.1647 151.029 36.4549 150.837C33.0292 150.697 29.2543 151.246 25.9025 150.554C24.6003 150.286 23.5711 149.78 22.7046 148.746C21.364 144.933 22.0021 134.964 22.004 130.591L22.0168 109.89L22.0382 56.8942C18.2506 56.8657 12.5361 57.3952 8.99977 56.6171ZM174.98 56.8679C175.246 63.2434 175.072 69.6915 175.071 76.0746L175.067 110.188L175.075 133.435C175.078 137.695 175.318 142.125 174.949 146.369C174.864 147.344 174.426 148.56 173.772 149.315C172.737 150.507 169.474 150.726 167.999 150.785C164.575 150.921 161.154 150.852 157.732 151.098C149.316 151.703 140.989 153.142 132.713 154.733C130.147 155.227 127.003 155.467 124.709 156.72L124.599 157.004C127.493 157.8 134.719 157.041 138.125 157.059L169.601 157.081C175.646 157.084 181.756 156.89 187.791 157.22C188.465 156.144 188.108 122.85 188.108 117.454L188.104 71.1148C188.104 68.7306 188.515 59.3263 188.109 57.7153C188.047 57.4695 187.94 57.2495 187.823 57.0268C187.802 56.9869 187.782 56.9464 187.761 56.9062C183.503 56.7556 179.24 56.9053 174.98 56.8679ZM0 161.212L0 166L196.562 166C196.697 165.806 196.807 165.601 196.871 165.373C197.196 164.231 197.187 162.277 196.584 161.25L196.213 161.79C196.227 161.832 196.243 161.873 196.255 161.916C196.392 162.387 196.068 163.305 195.825 163.714C195.431 164.378 194.753 164.665 194.029 164.835C190.929 165.564 178.271 165.026 174.083 165.031L117.525 165.043L39.5881 165.06L16.2654 165.045C12.2845 165.049 8.07822 165.32 4.12046 164.99C3.40851 164.931 2.75261 164.838 2.13941 164.44C0.973203 163.683 0.81032 162.278 0.556355 161.025L0 161.212ZM0 52.6063L0 161.212L0.556355 161.025C0.419256 153.511 0.563223 145.972 0.565282 138.455L0.570226 92.9897L0.550293 66.9044C0.543215 62.0023 0.302751 56.9728 0.67687 52.0906L0 52.6063ZM196.374 51.9592C197.026 55.3497 196.521 59.6638 196.508 63.1672L196.501 85.4114L196.51 134.922C196.515 143.418 196.786 152.013 196.502 160.501C196.487 160.925 196.366 161.394 196.213 161.79L196.584 161.25C196.626 161.179 196.669 161.109 196.706 161.035C197.026 160.39 196.987 159.701 196.995 158.999C197.267 133.035 197.008 107.039 197.006 81.0727C197.005 76.2822 197.504 54.6359 196.741 52.2303L196.374 51.9592Z"/>
                      <path d="M196.374 51.9592L196.741 52.2303C197.504 54.6359 197.005 76.2822 197.006 81.0727C197.008 107.039 197.267 133.035 196.995 158.999C196.987 159.701 197.026 160.39 196.706 161.035C196.669 161.109 196.626 161.179 196.584 161.25L196.213 161.79C196.366 161.394 196.487 160.925 196.502 160.501C196.786 152.013 196.515 143.418 196.51 134.922L196.501 85.4114L196.508 63.1672C196.521 59.6638 197.026 55.3497 196.374 51.9592Z"/>
                      <path d="M0 52.6063L0.67687 52.0906C0.302751 56.9728 0.543215 62.0023 0.550293 66.9044L0.570226 92.9897L0.565282 138.455C0.563223 145.972 0.419256 153.511 0.556355 161.025L0 161.212L0 52.6063Z"/>
                      <path d="M44.4546 59.7835C48.4874 58.9704 64.5882 62.6435 69.2515 63.7069C72.9481 64.5498 80.6852 65.4849 82.7326 68.8921C83.0678 69.4498 83.2502 70.1144 83.0854 70.7572C82.7203 72.1811 81.3615 73.3459 80.1343 74.0424C79.9557 74.0921 79.7767 74.1249 79.5959 74.1637C77.7038 74.5703 62.9431 70.2957 59.2507 69.6067C54.8595 68.7872 48.7605 68.6727 44.7176 67.341C43.5996 66.9728 42.5177 66.3863 41.9834 65.2802C41.5568 64.3971 41.5842 63.3358 41.9046 62.4257C42.3889 61.0503 43.1919 60.3805 44.4546 59.7835Z"/>
                      <path d="M45.1303 98.8442C53.8264 98.9316 66.63 102.03 75.1857 104.251C77.7355 104.912 81.4717 105.671 82.8803 108.18C83.2219 108.789 83.3481 109.43 83.1322 110.104C82.6316 111.668 80.8351 112.945 79.4486 113.651C77.4028 113.831 70.4592 111.246 67.961 110.621Q61.2285 108.947 54.3594 107.974C51.27 107.552 47.6896 107.432 44.7187 106.616C43.8788 106.386 43.0139 105.809 42.2562 105.38Q42.0966 104.858 41.9692 104.327C41.6572 103.054 41.5894 101.666 42.325 100.508C42.9941 99.4535 43.9739 99.0802 45.1303 98.8442Z"/>
                      <path d="M44.7259 118.523C50.7434 118.129 76.9402 123.092 81.825 126.362C81.9547 126.553 82.0752 126.749 82.1951 126.947C82.8089 127.957 83.1207 128.935 82.7983 130.125C82.4234 131.508 81.3714 132.303 80.1955 132.976C76.9534 133.561 72.0769 131.436 68.8648 130.624C65.2054 129.699 61.5226 128.81 57.7912 128.226C54.1679 127.659 47.7946 127.386 44.6044 126.102C43.4486 125.637 42.3735 124.945 41.8869 123.741C41.4755 122.723 41.6717 121.644 42.0838 120.66C42.6224 119.374 43.5235 119.017 44.7259 118.523Z"/>
                      <path d="M44.8779 79.3027C51.7748 79.0806 65.1765 82.2161 72.1663 84.0098C75.3929 84.8377 81.1202 85.6353 82.9092 88.8085C83.214 89.3491 83.3504 89.9968 83.1699 90.6027C82.7419 92.0397 81.0236 93.4316 79.7445 94.0961C76.7805 94.1023 73.2252 92.671 70.3534 91.9041C67.1155 91.0395 63.8194 90.2277 60.5342 89.5635C56.2788 88.7031 47.9513 88.2912 44.4113 86.9253C43.346 86.5143 42.2879 85.9473 41.822 84.8403C41.4089 83.8587 41.6064 82.7939 41.9961 81.8426C42.6169 80.3268 43.4546 79.9026 44.8779 79.3027Z"/>
                      <path d="M151.106 98.8505C151.882 98.8739 152.671 98.9511 153.384 99.2824C154.277 99.6975 154.917 100.364 155.258 101.292C155.627 102.298 155.558 103.361 155.09 104.325C154.543 105.451 153.701 106.09 152.537 106.476C148.711 107.746 144.041 107.85 140.025 108.521C132.84 109.723 125.481 111.455 118.569 113.736C117.581 113.747 116.348 113.151 115.595 112.523C114.792 111.854 114.204 110.838 114.111 109.789C114.014 108.707 114.44 107.59 115.165 106.789C116.868 104.909 121.401 104.33 123.768 103.738C132.762 101.485 141.83 99.5002 151.106 98.8505Z"/>
                      <path d="M149.196 59.585C151.495 59.2687 152.738 59.5738 154.731 60.7759C154.919 61.1874 155.106 61.6092 155.234 62.044C155.561 63.1566 155.551 64.5148 154.927 65.5305C154.228 66.6662 152.889 66.9532 151.667 67.2864C147.767 68.3495 143.534 68.6112 139.543 69.3701C132.979 70.6184 126.542 72.2638 120.059 73.8629Q119.696 73.9607 119.325 74.027C118.123 74.2361 116.942 74.0667 115.932 73.3538C115.05 72.7322 114.226 71.7797 114.06 70.6849C113.914 69.7205 114.253 68.6673 114.832 67.8978C115.312 67.2594 116.011 66.709 116.734 66.3743C118.922 65.362 121.604 64.9258 123.941 64.3561C132.314 62.3144 140.648 60.6892 149.196 59.585Z"/>
                      <path d="M150.823 79.0998C151.618 78.9929 152.682 79.1129 153.39 79.4839C154.31 79.9655 155.375 81.5949 155.664 82.5843C155.857 83.245 155.828 83.9305 155.484 84.5369C154.693 85.9275 152.994 86.6843 151.534 87.1308C148.289 88.1229 144.244 88.1126 140.852 88.7445C133.417 90.1296 126.16 91.9341 118.854 93.8805C117.669 93.9975 116.646 93.7268 115.7 92.9964C114.811 92.3108 114.217 91.3974 114.094 90.2653C113.982 89.2362 114.414 88.0375 115.087 87.26C118.101 83.7796 144.928 79.645 150.823 79.0998Z"/>
                      <path d="M148.947 118.342C150.309 118.151 151.795 118.023 153.082 118.613C154.081 119.072 154.837 119.85 155.22 120.884Q155.355 121.245 155.415 121.625Q155.476 122.006 155.458 122.391Q155.441 122.776 155.347 123.149Q155.253 123.523 155.086 123.87C154.693 124.686 153.904 125.489 153.046 125.811C149.884 127 145.939 127.107 142.59 127.642C135.571 128.764 127.495 130.17 120.825 132.585C120.35 132.721 119.871 132.839 119.382 132.914C118.085 133.111 117.08 133.055 115.981 132.237C115.057 131.549 114.053 130.479 113.905 129.297C113.797 128.434 114.143 127.642 114.666 126.97C117.97 122.723 142.712 119.163 148.947 118.342Z"/>
                      <path d="M125.543 8.04137C126.088 8.09855 126.609 8.20361 127.127 8.3861C128.097 8.7276 128.971 9.35478 129.407 10.3118C130.035 11.6896 129.794 13.1199 129.281 14.4782C128.276 17.1431 123.141 25.8389 121.302 27.8C120.712 28.4303 119.979 28.7881 119.203 29.1403Q118.522 29.0776 117.869 28.8761Q117.216 28.6746 116.618 28.3429C115.714 27.8417 115.123 27.0763 114.863 26.0762C114.353 24.1163 115.432 22.0607 116.373 20.4092C118.083 17.4096 121.246 10.9533 123.779 8.81069C124.276 8.3903 124.926 8.21012 125.543 8.04137Z"/>
                      <path d="M69.7788 8.27926C70.5225 8.17034 71.2054 8.11369 71.9521 8.26381C73.4008 8.55504 74.3507 9.97811 75.135 11.1311C76.9421 13.7877 81.4872 21.04 82.2544 23.852C82.417 24.4481 82.3793 25.1151 82.2561 25.7173C81.9433 27.2454 80.7785 28.0304 79.5636 28.8245C78.8971 28.9467 78.1777 29.0396 77.5066 28.9012C76.0004 28.5907 74.9896 27.0374 74.1977 25.8395C72.5898 23.4075 66.4381 13.8226 67.0052 11.3276C67.3498 9.8113 68.5654 9.05804 69.7788 8.27926Z"/>
                      <path d="M97.0813 1.0327C97.9356 0.923617 98.8564 0.846437 99.6934 1.08199C100.642 1.34884 101.614 1.98803 102.091 2.87085C103.288 5.08439 103.213 18.0654 102.393 20.6542C101.917 22.1568 100.98 22.7543 99.6584 23.437C99.1432 23.568 98.658 23.6516 98.1276 23.5579C97.0127 23.361 95.7531 22.8209 95.1021 21.8605C93.6783 19.7599 93.9535 6.89787 94.5105 4.20095C94.8436 2.58806 95.7893 1.88755 97.0813 1.0327Z"/>
                    </svg>
                    Story
                  </button>
                  <button class="tablinks tabButton" data-tab="FunFacts" @click="openTab($event, 'FunFacts')">
                    <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="192" height="208" viewBox="0 0 192 208">
                      <path d="M35.7479 56.3425C36.861 57.1491 37.7284 57.9142 37.9658 59.3556Q38.0333 59.755 38.0189 60.1599Q38.0044 60.5647 37.9086 60.9584Q37.8128 61.352 37.6396 61.7182Q37.4663 62.0844 37.2228 62.4081C36.5809 63.2489 35.5431 63.8263 34.4955 63.9533C33.4146 64.0843 32.3956 63.6486 31.4635 63.1491C32.5837 63.0778 33.7396 63.5304 34.8053 63.0548C34.8433 63.0378 34.8808 63.0198 34.9189 63.003C35.4114 62.7851 35.8684 62.5711 36.1589 62.0927C37.0328 60.6534 36.1627 57.846 35.7479 56.3425Z"/>
                      <path d="M31.4635 63.1491C27.4601 60.8184 18.7435 56.5686 15.7008 53.7553C15.1993 53.2915 14.8659 52.7506 14.6713 52.094C14.3727 51.0869 14.5211 49.7336 15.0281 48.8109C15.4336 48.073 16.1711 47.6111 16.9725 47.4084C18.193 47.0997 19.4877 47.3388 20.6543 47.7499C24.4714 49.0951 31.9892 54.0582 35.7479 56.3425C36.1627 57.846 37.0328 60.6534 36.1589 62.0927C35.8684 62.5711 35.4114 62.7851 34.9189 63.003C34.8808 63.0198 34.8433 63.0378 34.8053 63.0548C33.7396 63.5304 32.5837 63.0778 31.4635 63.1491Z"/>
                      <path d="M141.689 13.8055C142.449 13.8272 143.18 13.8576 143.899 14.1271C144.906 14.5041 145.916 15.1758 146.34 16.2014C146.847 17.4293 146.231 18.995 145.719 20.1421C144.343 23.2238 138.319 33.9551 136.093 36.2922C135.537 36.8764 134.899 37.1609 134.16 37.4452C133.475 37.3772 132.7 37.2562 132.061 36.9958C131.146 36.6234 130.439 36.0067 130.078 35.0734C129.496 33.5665 129.883 31.9713 130.513 30.5494C131.86 27.5086 137.611 17.3118 139.794 14.9951C140.35 14.4053 140.94 14.0915 141.689 13.8055Z"/>
                      <path d="M158.739 129.018C159.316 128.982 159.916 128.94 160.494 128.988C162.843 129.181 177.631 137.717 179.165 139.642C179.707 140.322 179.92 141.232 179.801 142.086C179.564 143.788 178.342 144.87 177.052 145.841C176.449 145.908 175.809 145.977 175.218 145.809C172.626 145.073 160.924 138.218 158.668 136.537C157.89 135.958 157.159 135.262 156.688 134.405C156.216 133.549 156.029 132.585 156.331 131.639C156.729 130.391 157.622 129.619 158.739 129.018Z"/>
                      <path d="M49.9489 14.0672C50.7813 13.9341 51.6712 13.8491 52.5144 13.9372C53.5469 14.0452 54.1475 14.5502 54.7752 15.3292C56.6877 17.7027 64.9771 31.4517 64.6911 33.6698C64.4945 35.1955 63.4855 36.1652 62.3346 37.0563C61.7464 37.2409 61.1298 37.438 60.5064 37.3956C59.4093 37.321 58.5684 36.8545 57.8491 36.037C55.7779 33.6832 49.5241 22.6651 48.3271 19.6897C48.0106 18.9029 47.8083 18.1114 47.8798 17.2567C48.0045 15.7662 48.8919 14.9794 49.9489 14.0672Z"/>
                      <path d="M32.583 129.06C33.4647 128.931 34.5527 128.867 35.4186 129.098C36.322 129.34 37.0288 129.828 37.4772 130.662C38.0128 131.657 38.2188 132.747 37.8505 133.835C37.4826 134.921 36.6589 135.752 35.7795 136.451C33.783 138.036 31.2424 139.13 29.0341 140.404C25.9101 142.205 22.8615 144.255 19.6022 145.797C18.9257 145.97 18.1258 145.998 17.4554 145.794C16.4012 145.473 15.3054 144.613 14.8021 143.623C14.3607 142.755 14.3696 141.828 14.6905 140.921C15.1179 139.713 16.0308 138.733 17.0121 137.94C19.7786 135.706 29.1028 130.752 32.583 129.06Z"/>
                      <path d="M175.37 47.043C176.163 47.0671 177.013 47.2368 177.729 47.5799C178.571 47.983 179.248 48.565 179.549 49.4705C179.895 50.5141 179.898 51.6734 179.369 52.6561C178.913 53.5038 178.15 54.1557 177.382 54.7161C174.853 56.5625 163.45 63.22 160.871 64.0235C159.816 64.025 158.958 63.9634 158.011 63.423C157.181 62.9491 156.652 62.2784 156.411 61.3517Q156.3 60.9089 156.278 60.4529Q156.256 59.9968 156.325 59.5455Q156.394 59.0941 156.551 58.6653Q156.708 58.2365 156.946 57.8471C158.305 55.6534 172.571 47.6987 175.37 47.043Z"/>
                      <path d="M5.53305 92.3614C9.28994 92.1593 23.0411 91.6845 25.8711 92.8956C26.8495 93.3143 27.7419 93.9909 28.1351 95.01C28.5357 96.0484 28.3582 97.2348 27.8966 98.2254C27.2943 99.5179 26.0336 100.009 24.7898 100.478C20.6352 100.863 10.309 101.052 6.38029 100.466C5.47641 100.331 4.62701 99.977 3.79292 99.6163C3.40822 99.0989 2.98649 98.5503 2.73633 97.9526C2.33167 96.9857 2.26728 95.7183 2.6919 94.7463C3.27189 93.4186 4.24931 92.8556 5.53305 92.3614Z"/>
                      <path d="M96.322 1.53939Q97.245 1.44829 98.1386 1.69658C99.2918 2.02664 100.092 2.75816 100.642 3.80769C101.665 5.75665 101.655 22.6233 100.877 24.8924C100.368 26.3775 99.3272 26.9725 98.0109 27.6288C97.3081 27.6693 96.7009 27.6157 96.0241 27.4085C94.9614 27.0833 94.0627 26.4823 93.5541 25.4656C92.4582 23.2745 92.6131 6.32002 93.5371 3.8534C94.0138 2.58054 95.1697 2.0553 96.322 1.53939Z"/>
                      <path d="M168.918 92.3707C172.246 92.1584 175.654 92.275 178.993 92.2621C181.588 92.2521 184.291 92.0785 186.871 92.3112C189.182 92.5197 190.509 93.15 192 94.9327L192 97.5016C191.49 98.3051 190.902 99.2052 190.098 99.7376C189.41 100.193 188.699 100.418 187.885 100.523C184.727 100.932 172.484 100.868 169.411 100.288C168.23 100.064 167.337 99.7019 166.654 98.6552C166.059 97.7428 165.747 96.5775 166.006 95.5004C166.374 93.9732 167.654 93.1139 168.918 92.3707Z"/>
                      <path d="M86.3097 207.716C81.1392 206.785 76.7624 204.029 73.7599 199.71Q73.3624 199.139 73.0081 198.54C71.815 196.517 71.0995 194.281 70.7496 191.965C70.3159 189.094 70.4357 186.144 70.441 183.247C70.4567 174.76 71.2513 165.454 69.144 157.18Q68.4834 154.569 67.547 152.044Q66.6105 149.519 65.4091 147.109Q64.2077 144.699 62.7551 142.432Q61.3025 140.164 59.6154 138.065C57.1426 134.993 54.4207 132.091 52.0653 128.928C43.1204 116.916 39.7645 101.16 42.4654 86.5045Q42.7089 85.1502 43.0187 83.8094Q43.3285 82.4687 43.7038 81.1448Q44.0791 79.8209 44.519 78.517Q44.9589 77.2131 45.4623 75.9325Q45.9657 74.6518 46.5314 73.3974Q47.0971 72.143 47.7238 70.9179Q48.3504 69.6928 49.0365 68.5Q49.7226 67.3071 50.4665 66.1495Q51.2104 64.9918 52.0102 63.8721Q52.8101 62.7523 53.664 61.6732Q54.5179 60.5942 55.4237 59.5583Q56.3296 58.5225 57.2853 57.5324Q58.241 56.5423 59.2441 55.6004Q60.2473 54.6585 61.2955 53.767Q62.3437 52.8755 63.4345 52.0366Q64.5252 51.1976 65.6559 50.4133Q66.7697 49.6504 67.9193 48.9425Q69.0689 48.2347 70.2516 47.5835Q71.4342 46.9324 72.6471 46.3394Q73.86 45.7465 75.1002 45.2132Q76.3405 44.68 77.6052 44.2076Q78.8699 43.7352 80.1561 43.3248Q81.4423 42.9145 82.7469 42.5671Q84.0515 42.2197 85.3714 41.9362Q86.6913 41.6526 88.0235 41.4335Q89.3557 41.2144 90.6969 41.0603Q92.0381 40.9062 93.3853 40.8175Q94.7324 40.7288 96.0822 40.7056Q97.4321 40.6824 98.7815 40.7249Q100.131 40.7673 101.477 40.8753Q102.822 40.9833 104.161 41.1565Q105.5 41.3298 106.829 41.5679C121.072 44.2212 134.424 52.5365 142.658 64.5519C151.257 77.0994 154.61 91.8013 151.804 106.826Q151.493 108.428 151.089 110.008Q150.684 111.589 150.189 113.143Q149.693 114.698 149.107 116.22Q148.521 117.743 147.848 119.229Q147.174 120.715 146.415 122.159Q145.656 123.603 144.813 125.001Q143.971 126.398 143.049 127.744Q142.126 129.089 141.127 130.379C139.338 132.661 137.282 134.731 135.386 136.924C131.09 141.895 127.865 147.428 125.949 153.73C123.176 162.853 123.759 173.071 123.788 182.511C123.799 186.077 124.06 189.827 123.257 193.319Q123.093 194.017 122.879 194.7Q122.665 195.384 122.401 196.05Q122.137 196.716 121.824 197.361Q121.512 198.006 121.153 198.626Q120.794 199.246 120.391 199.838Q119.987 200.43 119.541 200.991Q119.095 201.552 118.609 202.078Q118.123 202.605 117.6 203.094Q116.629 203.988 115.541 204.733C113.388 206.217 110.989 207.148 108.447 207.719C108.419 207.732 108.391 207.747 108.362 207.759C107.186 208.271 87.4758 208.18 86.3097 207.716ZM92.2083 49.1158C77.9538 51.5556 66.9227 56.745 58.3562 68.8371C50.9005 79.3612 48.3491 92.5164 50.5138 105.151Q50.768 106.59 51.1131 108.01Q51.4583 109.43 51.8929 110.825Q52.3276 112.22 52.85 113.585Q53.3724 114.95 53.9804 116.279Q54.5885 117.607 55.2797 118.895Q55.971 120.182 56.7426 121.423Q57.5143 122.664 58.3632 123.854Q59.2121 125.043 60.1349 126.176C62.5319 129.122 65.192 131.904 67.424 134.977C74.2816 144.418 77.5387 154.307 78.7229 165.856C86.2883 165.983 93.8705 165.855 101.438 165.83Q108.396 165.796 115.351 166.022C116.096 163.32 116.27 160.511 116.724 157.754Q117.403 153.77 118.679 149.935Q119.954 146.1 121.797 142.503C125.926 134.489 131.187 130.517 136.054 123.633Q136.53 122.947 136.982 122.245Q137.434 121.543 137.861 120.826Q138.288 120.108 138.69 119.377Q139.092 118.645 139.468 117.899Q139.844 117.154 140.194 116.396Q140.543 115.638 140.867 114.868Q141.19 114.098 141.486 113.318Q141.782 112.537 142.051 111.747Q142.32 110.957 142.561 110.157Q142.802 109.358 143.015 108.551Q143.228 107.743 143.413 106.929Q143.598 106.115 143.754 105.295Q143.911 104.475 144.038 103.65Q144.166 102.825 144.265 101.996Q144.363 101.167 144.433 100.335Q144.503 99.503 144.544 98.6692Q144.585 97.8353 144.597 97.0005Q144.608 96.1657 144.591 95.331Q144.574 94.4964 144.527 93.6628Q144.481 92.8292 144.405 91.9978Q144.33 91.1663 144.225 90.338Q144.121 89.5097 143.988 88.6855Q143.854 87.8613 143.693 87.0423Q143.531 86.2233 143.34 85.4104Q143.15 84.5975 142.931 83.7918Q142.713 82.986 142.466 82.1884Q142.22 81.3907 141.946 80.6022Q141.672 79.8136 141.37 79.035Q141.069 78.2565 140.74 77.489Q140.412 76.7214 140.057 75.9657Q139.702 75.2101 139.321 74.4673Q138.94 73.7245 138.533 72.9954Q137.953 71.9753 137.324 70.9849Q136.695 69.9945 136.018 69.0361Q135.341 68.0777 134.617 67.1537Q133.894 66.2296 133.127 65.3421Q132.359 64.4546 131.549 63.6059Q130.739 62.7571 129.888 61.949Q129.037 61.141 128.148 60.3756Q127.258 59.6103 126.332 58.8895Q125.406 58.1686 124.446 57.494Q123.486 56.8195 122.494 56.1928Q121.502 55.5661 120.481 54.9888Q119.459 54.4114 118.41 53.8849Q117.362 53.3584 116.289 52.8839Q115.215 52.4094 114.12 51.9881Q113.025 51.5668 111.911 51.1996Q110.796 50.8325 109.665 50.5205C103.974 48.9546 98.0802 48.587 92.2083 49.1158ZM78.7033 173.943C78.4853 176.87 78.6758 179.813 78.519 182.745C83.7971 182.956 89.1158 182.813 94.3985 182.795C97.5556 182.785 101.005 182.52 104.091 183.214C105.095 184.045 106.335 184.94 106.48 186.344C106.585 187.366 106.288 188.521 105.621 189.312C104.579 190.545 102.831 190.978 101.28 191.066C97.4329 191.286 81.4038 190.158 79.389 191.379C79.0705 191.904 78.9072 192.172 79.0539 192.807C79.5125 194.796 82.4903 197.625 84.2237 198.615C85.3163 199.24 86.6107 199.731 87.8729 199.497C89.1909 200.538 102.999 200.108 105.341 199.839C108.563 199.47 111.436 198.192 113.476 195.603C114.448 194.37 115.093 192.948 115.439 191.419C116.254 187.807 116.058 178.203 115.856 174.056C103.502 173.732 91.0319 174.518 78.7033 173.943Z"/>
                      <path d="M118.653 74.0647Q119.907 73.91 121.171 73.9074C124.29 73.8855 127.304 74.9982 129.532 77.2056Q129.942 77.6076 130.31 78.0483Q130.678 78.4891 131 78.9642Q131.323 79.4394 131.596 79.9442Q131.87 80.449 132.092 80.9785Q132.314 81.508 132.482 82.057Q132.651 82.606 132.764 83.1689Q132.877 83.7319 132.933 84.3033Q132.99 84.8747 132.989 85.4489C132.991 87.2595 132.56 89.5525 131.595 91.104C129.211 94.9374 123.389 99.897 120.038 103.237L99.8098 123.525C96.9301 126.416 94.1938 128.87 89.8599 128.854C83.2289 128.83 78.5903 122.443 74.327 118.167C70.4683 114.251 63.0386 108.359 61.6406 103.101Q61.4971 102.553 61.4074 101.994Q61.3178 101.436 61.2829 100.871Q61.248 100.306 61.2682 99.7398Q61.2884 99.1741 61.3635 98.613Q61.4385 98.0519 61.5678 97.5007Q61.697 96.9496 61.8792 96.4136Q62.0614 95.8777 62.2948 95.3619Q62.5282 94.8462 62.8106 94.3556C64.3941 91.6263 67.015 89.5 70.0853 88.7046C77.0261 86.9064 81.4103 91.975 85.7142 96.4844C86.697 97.5141 87.7303 98.792 88.9729 99.5012C89.3511 99.717 89.7896 99.8676 90.2361 99.7804C91.061 99.6193 110.749 78.7244 114.449 76.054C115.799 75.08 117.058 74.5202 118.653 74.0647ZM120.276 81.9754L120.198 82.0196C117.137 83.784 113.63 88.061 111.096 90.6139L97.8836 103.912C95.9919 105.811 93.927 108.352 91.5886 109.671C90.7796 110.127 89.9854 110.24 89.078 110.018C84.0069 108.775 76.0027 94.2718 71.3434 96.9403Q70.9983 97.1412 70.7004 97.4071Q70.4025 97.6731 70.1639 97.9933Q69.9253 98.3135 69.7556 98.675Q69.586 99.0365 69.4922 99.4247C69.2672 100.352 69.3932 101.369 69.9179 102.176C70.9973 103.836 73.1475 105.558 74.5752 106.985C77.8103 110.101 84.315 117.481 87.4803 119.613C88.2177 120.11 88.9822 120.425 89.8807 120.422C90.6769 120.419 91.3747 120.224 92.0168 119.749C94.8225 117.676 97.4181 114.531 99.8946 112.046C104.549 107.375 109.319 102.779 113.885 98.024C116.651 95.1424 125.109 88.3638 124.984 84.5074C124.965 83.9361 124.778 83.4584 124.347 83.0732C123.322 82.1566 121.59 81.9072 120.276 81.9754Z"/>
                    </svg>
                    Fun Facts
                  </button>
                </div>
                <div class="miniGameTab">
                  <button class="tablinks tabButton PlayGame" @click="showMiniGame()">
                      Play Game
                  </button>
                </div>
                <div class="tabcontentContainer">
                  <div id="Info" class="tabcontent" style="display: block;">
                    <div class="additional-info">
                      <div class="additional-info-row">
                        <div class="additional-info-item">
                          <strong>Release Date:</strong> 
                          <span>{{ formattedReleaseDate }}</span>
                        </div>
                        <div class="additional-info-item">
                          <strong>Total Distance Traveled:</strong> 
                          <span>{{ formattedTotalDistance }}</span>
                        </div>
                      </div>
                      <div class="additional-info-row">
                        <div class="additional-info-item">
                          <strong>Avg. Speed:</strong> 
                          <span>{{ formattedAverageSpeed }}</span>
                        </div>
                        <div class="additional-info-item">
                          <strong>Avg. Distance per Day:</strong> 
                          <span>{{ formattedAverageDistancePerDay }}</span>
                        </div>
                      </div>
                      <!-- Conservation Section -->
                      <div class="additional-info-item conservation-section">
                        <strong>Conservation Level:</strong>
                        <div class="conservation-indicator" :class="'level-' + animal.conservation_rating">
                          <span v-for="level in 5" :key="level" class="conservation-level-dot" :class="{ active: level <= animal.conservation_rating }"></span>
                        </div>
                        <div class="conservation-details">
                          <p><strong>Status:</strong> {{ animal.conservation_status }}</p>
                          <p><strong>Description:</strong><br> {{ animal.conservation_description }}</p>
                        </div>
                      </div>
                      <div class="additional-info-item">
                        <div class="side-bar-animal-info physique-block">
                          <div class="animal-physique-info">
                            <div class="animal-sex animal-top-info-line">{{ animal.gender }}</div>
                            <div class="animal-weight animal-top-info-line">{{ formattedWeight }}</div>
                          </div>
                          <div class="animal-physique-shape" v-if="animal.shape">
                            <img class="animal-physique-image" :src="animal.shape" width="100%" height="auto">
                          </div>
                          <div class="animal-physique-info animal-physique-info-side-borders">
                            <div class="animal-length-line"></div>
                            <div class="animal-length">{{ formattedLength }}</div>
                            <div class="animal-length-line"></div>
                          </div>
                        </div>
                      </div>
                      <div class="additional-info-item">
                        <div class="phase-container">
                          <section class="step-indicator">
                            <div class="step step1" :class="{ active: animal.life_stage > 0, current: animal.life_stage == 1 }">
                              <div class="step-icon">
                              </div>
                              <p :class="{current_life_stage: animal.life_stage == 1 }">Newborn</p>
                            </div>
                            <div class="indicator-line" :class="{ active: animal.life_stage > 1 }"></div>
                            <div class="step step2" :class="{ active: animal.life_stage > 1, current: animal.life_stage == 2 }">
                              <div class="step-icon" :class>
                              </div>
                              <p :class="{current_life_stage: animal.life_stage == 2 }">Juvenile</p>
                            </div>
                            <div class="indicator-line" :class="{ active: animal.life_stage > 2 }"></div>
                            <div class="step step3" :class="{ active: animal.life_stage > 2, current: animal.life_stage == 3 }">
                              <div class="step-icon">
                              </div>
                              <p :class="{current_life_stage: animal.life_stage == 3 }">Adolescent</p>
                            </div>
                            <div class="indicator-line" :class="{ active: animal.life_stage > 3 }"></div>
                            <div class="step step4" :class="{ active: animal.life_stage > 3, current: animal.life_stage == 4 }">
                              <div class="step-icon">
                              </div>
                              <p :class="{current_life_stage: animal.life_stage == 4 }">Adult</p>
                            </section>
                          </div>
                        </div>
                      </div>
                    </div>
                  <div id="Story" class="tabcontent" style="display: none;">
                    <div class="side-bar-animal-info">
                      <div class="side-bar-animal-info-description" v-html="formattedDescription">
                        <br>
                        {{ animal.description }}
                        <br>
                      </div>
                    </div>
                  </div>
                  <div id="FunFacts" class="tabcontent" style="display: none;">
                    <div class="side-bar-animal-info">
                      <div class="side-bar-animal-info-fun-fact">
                        <div class="side-bar-animal-info-fun-fact-title">
                          Look back here daily for a new Fun Fact:
                        </div>
                        {{ animal.fun_fact }}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div v-else class="side-bar-animal-info-wrapper">
                <div class="side-bar-buy-animal-container">
                  <div class="buy-animal-description">
                    Adopt this animal now!
                  </div>
                  <button 
                    class="buy-now-button" 
                    @click="handleBuyAnimal(animal.id)"
                    :disabled="buyingAnimalId === animal.id || !hasEnoughPoints">
                    <img v-if="buyingAnimalId !== animal.id" :src="pluginDirUrl + '/media/plus_points_coin.png'" class="kuku_points_img_buy_button" />
                    <div v-else class="button-loading-spinner"></div> <!-- Spinner when loading -->
                    <span v-if="buyingAnimalId !== animal.id">
                      1000
                    </span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div v-else class="position-info">
        <div class="side-bar-animal-picture">
          <div class="animal-image-container">
            <img class="animal_image" :src="animal.picture" @load="adjustOverlayBackground">
          </div>
          <button class="side-bar-close" @click="closeInfobox">âœ•</button>
          <div class="side-bar-animal-details" ref="animalDetails">
            <div class="side-bar-animal-details-name">{{ animal.name }}</div>
            <div class="side-bar-animal-details-small">{{ animal.species }}</div>
          </div>
          <div class="last-location-wrapper" ref="lastLocationWrapper">
            <div class="last-location-label-background"></div>
            <div class="last-location-label-text">
              <template v-if="!selectedEntity.isLast">
                <mat-icon class="last-location-mat-icon" role="img" aria-hidden="true" data-mat-icon-type="svg" data-mat-icon-name="ping">
                  <svg
                    class="last-location-svg"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    x="0px"
                    y="0px"
                    viewBox="0 0 30 30"
                    xml:space="preserve"
                    fit=""
                    height="100%"
                    width="100%"
                    preserveAspectRatio="xMidYMid meet"
                    focusable="false"
                  >
                    <path
                      fill="#fff"
                      d="M15,0C6.7,0,0,6.7,0,15c0,8.3,6.7,15,15,15c8.3,0,15-6.7,15-15c0,0,0,0,0,0C30,6.7,23.3,0,15,0z M29.6,15 c0,8-6.5,14.5-14.6,14.5C6.9,29.5,0.4,23,0.4,15C0.5,6.9,7,0.4,15,0.4C23.1,0.5,29.6,7,29.6,15C29.6,15,29.6,15,29.6,15z"
                    ></path>
                    <path
                      fill="#fff"
                      d="M15,3C8.4,3,3,8.4,3,15c0,6.6,5.3,12,12,12c6.6,0,12-5.3,12-12c0,0,0,0,0,0C27,8.4,21.6,3,15,3z M25.8,15 c0,5.9-4.8,10.8-10.8,10.7C9,25.8,4.2,20.9,4.2,15C4.2,9,9.1,4.2,15,4.2C21,4.2,25.8,9.1,25.8,15C25.8,15,25.8,15,25.8,15z"
                    ></path>
                    <path fill="#fff" d="M15,7c-4.4,0-8,3.5-8,7.9c0,4.4,3.5,8,7.9,8c4.4,0,8-3.5,8-7.9c0,0,0,0,0,0C23,10.6,19.4,7.1,15,7z"></path>
                  </svg>
                </mat-icon>
              </template>
              <template v-else>
                <img :src="pluginDirUrl + '/media/release_animal.webp'" alt="Release Animal Icon" class="release-animal-icon" />
              </template>
              <span>{{ selectedEntity.dt_move }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <WarmingUpGame ref="warmingUpGame" :pluginDirUrl="pluginDirUrl" v-show="WarmingUpMiniGame" @close="MiniGame = false, WarmingUpMiniGame = false"/>
  <DivingGame ref="divingGame" :pluginDirUrl="pluginDirUrl" v-show="DivingMiniGame" @close="MiniGame = false, DivingMiniGame = false"/>
  `,
  components: {
    WarmingUpGame,
    DivingGame,
  },
  data() {
    return {
      MiniGame: false,
      WarmingUpMiniGame: false,
      DivingMiniGame: false,
    };
  },
  computed: {
    hasEnoughPoints() {
      // Assuming animal costs 1000 points (based on the button text)
      return this.userPoints >= 1000;
    },
    formattedDescription() {
      if (this.animal.description) {
        // Replace newline characters with <br> tags
        return this.animal.description.replace(/\n/g, '<br>');
      }
      return ''; // Return an empty string if description is undefined
    },
    preferredWeightUnit() {
      const userLocale = navigator.language || navigator.userLanguage;
      const country = userLocale.split('-')[1];

      // Use pounds (lbs) for the US, kilograms (kg) for others, but handle metric tons (mt) for large weights
      return country === 'US' ? 'lbs' : 'kg';
    },
    preferredLengthUnit() {
      const userLocale = navigator.language || navigator.userLanguage;
      const country = userLocale.split('-')[1];

      // Use feet (ft) and inches (in) for the US, meters (m) and centimeters (cm) for others
      return country === 'US' ? 'ft' : 'm';
    },
    releaseDate() {
      const lastLocation =
        this.animal.locations?.[this.animal.locations.length - 1];
      return lastLocation ? lastLocation.dt_move : 'N/A';
    },
    totalDistance() {
      if (!this.animal.locations || this.animal.locations.length < 2) return 0;
      let distance = 0;
      for (let i = 0; i < this.animal.locations.length - 1; i++) {
        const loc1 = this.animal.locations[i];
        const loc2 = this.animal.locations[i + 1];
        if (
          loc1.lat !== undefined &&
          loc1.lng !== undefined &&
          loc2.lat !== undefined &&
          loc2.lng !== undefined
        ) {
          distance += this.calculateDistance(
            loc1.lat,
            loc1.lng,
            loc2.lat,
            loc2.lng
          );
        }
      }
      return parseFloat(distance.toFixed(2));
    },
    averageSpeed() {
      // Set firstLocation to the earliest and lastLocation to the latest
      const firstLocation =
        this.animal.locations?.[this.animal.locations.length - 1]; // Earliest
      const lastLocation = this.animal.locations?.[0]; // Latest
      const totalDistance = this.totalDistance;

      if (!firstLocation || !lastLocation || totalDistance === 0) {
        console.log('Missing data for average speed calculation:', {
          firstLocation,
          lastLocation,
          totalDistance,
        });
        return 'N/A';
      }

      // Parse the dates to ensure they are recognized correctly
      const firstDate = new Date(firstLocation.dt_move);
      const lastDate = new Date(lastLocation.dt_move);

      if (isNaN(firstDate) || isNaN(lastDate)) {
        console.log('Invalid date parsing:', { firstDate, lastDate });
        return 'N/A';
      }

      // Calculate the difference in days with correct ordering
      const days = (lastDate - firstDate) / (1000 * 60 * 60 * 24);
      if (days <= 0) {
        console.log('Invalid days calculation:', { firstDate, lastDate, days });
        return 'N/A';
      }

      const avgSpeed = (totalDistance / days).toFixed(2);
      return avgSpeed;
    },
    formattedReleaseDate() {
      return this.formatDate(this.releaseDate); // Call the formatDate function
    },
    preferredDistanceUnit() {
      return this.getPreferredDistanceUnit();
    },
    preferredSpeedUnit() {
      return this.preferredDistanceUnit === 'miles'
        ? 'miles / day'
        : 'km / day';
    },
    formattedTotalDistance() {
      // Convert to miles if preferred unit is miles, rounded to 1 decimal
      const distance =
        this.preferredDistanceUnit === 'miles'
          ? (this.totalDistance * 0.621371).toFixed(1)
          : this.totalDistance.toFixed(1);
      return `${distance} ${this.preferredDistanceUnit}`;
    },
    formattedAverageDistancePerDay() {
      // Use the previous average speed logic but rename to "Avg. Distance per Day"
      let distancePerDay = this.averageSpeed;

      // Convert the distance if the preferred unit is miles
      if (this.preferredDistanceUnit === 'miles' && !isNaN(distancePerDay)) {
        distancePerDay *= 0.621371; // Convert km/day to miles/day
      }

      const roundedDistance = isNaN(distancePerDay)
        ? 'N/A'
        : parseFloat(distancePerDay).toFixed(1);
      const unit = this.preferredDistanceUnit;

      return roundedDistance === 'N/A'
        ? roundedDistance
        : `${roundedDistance} ${unit} / day`;
    },
    formattedAverageSpeed() {
      // Ensure there are valid locations and total distance
      const firstLocation =
        this.animal.locations?.[this.animal.locations.length - 1]; // Earliest
      const lastLocation = this.animal.locations?.[0]; // Latest

      if (!firstLocation || !lastLocation || this.totalDistance === 0) {
        console.log('Missing data for average speed calculation:', {
          firstLocation,
          lastLocation,
        });
        return 'N/A';
      }

      const firstDate = new Date(firstLocation.dt_move);
      const lastDate = new Date(lastLocation.dt_move);

      if (isNaN(firstDate) || isNaN(lastDate)) {
        console.log('Invalid date parsing:', { firstDate, lastDate });
        return 'N/A';
      }

      // Calculate total time in hours
      const hours = (lastDate - firstDate) / (1000 * 60 * 60); // Difference in milliseconds to hours
      if (hours <= 0) {
        console.log('Invalid hours calculation:', {
          firstDate,
          lastDate,
          hours,
        });
        return 'N/A';
      }

      // Calculate average speed in km/h or convert to mph
      let avgSpeed = this.totalDistance / hours; // Speed in km/h
      if (this.preferredDistanceUnit === 'miles') {
        avgSpeed *= 0.621371; // Convert to mph if preferred unit is miles
      }

      const roundedSpeed = parseFloat(avgSpeed).toFixed(1);
      const unit = this.preferredDistanceUnit === 'miles' ? 'mph' : 'km/h'; // Set the appropriate unit

      return `${roundedSpeed} ${unit}`;
    },
    formattedWeight() {
      const weightMatch = /([\d.]+)\s*(\w+)/.exec(this.animal.weight); // Extract value and unit
      if (!weightMatch) return 'N/A'; // Handle invalid format

      let [_, value, unit] = weightMatch; // Destructure matches
      value = parseFloat(value); // Convert value to a number

      // If the weight is already in metric tons (mt), leave it unchanged
      if (unit === 'mt') {
        return `${value} ${unit}`;
      }

      // Convert weight to preferred unit
      if (this.preferredWeightUnit === 'lbs') {
        if (unit === 'grams') value *= 0.00220462; // grams to pounds
        else if (unit === 'kg') value *= 2.20462; // kilograms to pounds
        unit = 'lbs'; // Update unit
        return `${Math.round(value)} ${unit}`; // Round to whole numbers for lbs
      } else if (this.preferredWeightUnit === 'kg') {
        if (unit === 'grams') value /= 1000; // grams to kilograms
        unit = 'kg'; // Update unit
      }

      // Round to 1 decimal if needed; otherwise, show integer
      return `${value % 1 === 0 ? value.toFixed(0) : value.toFixed(1)} ${unit}`;
    },
    formattedLength() {
      const lengthMatch = /([\d.]+)\s*(\w+)/.exec(this.animal.length); // Extract value and unit
      if (!lengthMatch) return 'N/A'; // Handle invalid format

      let [_, value, unit] = lengthMatch; // Destructure matches
      value = parseFloat(value); // Convert value to a number

      // Convert length to preferred unit only when needed
      if (this.preferredLengthUnit === 'ft') {
        if (unit === 'mm') value *= 0.00328084; // millimeters to feet
        else if (unit === 'cm') value *= 0.0328084; // centimeters to feet
        else if (unit === 'm') value *= 3.28084; // meters to feet
        unit = 'ft'; // Update unit after conversion
      } else if (this.preferredLengthUnit === 'm') {
        if (unit === 'mm') value /= 1000; // millimeters to meters
        else if (unit === 'cm') {
          // Keep value in cm without conversion
          return `${
            value % 1 === 0 ? value.toFixed(0) : value.toFixed(1)
          } ${unit}`;
        } else if (unit === 'm') {
          // No conversion needed for meters
          return `${
            value % 1 === 0 ? value.toFixed(0) : value.toFixed(1)
          } ${unit}`;
        }
      }

      // Round to 1 decimal if needed; otherwise, show integer
      return `${value % 1 === 0 ? value.toFixed(0) : value.toFixed(1)} ${unit}`;
    },
  },
  methods: {
    showMiniGame(){
      this.MiniGame = true;

      switch (Math.floor(Math.random() * 2)) {
        case 0:
          this.WarmingUpMiniGame = true;
          this.$nextTick(() => {
            if (this.$refs.warmingUpGame && this.$refs.warmingUpGame.startGame) {
              this.$refs.warmingUpGame.startGame();
            }
          });
          break;
        case 1:
          this.DivingMiniGame = true;
          this.$nextTick(() => {
            if (this.$refs.divingGame && this.$refs.divingGame.startGame) {
              this.$refs.divingGame.startGame();
            }
          });
          break;
      }
    },
    logThis(entity) {
      console.log(entity);
      return entity;
    },
    calculateDistance(lat1, lng1, lat2, lng2) {
      const R = 6371; // Radius of the Earth in km
      const dLat = (lat2 - lat1) * (Math.PI / 180);
      const dLng = (lng2 - lng1) * (Math.PI / 180);
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * (Math.PI / 180)) *
          Math.cos(lat2 * (Math.PI / 180)) *
          Math.sin(dLng / 2) *
          Math.sin(dLng / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    },
    openTab(evt, tabName) {
      evt.preventDefault();
      const sideBarContent = evt.currentTarget.closest('.side-bar-content');
      if (!sideBarContent) return;

      const tabcontent = sideBarContent.querySelectorAll('.tabcontent');
      tabcontent.forEach((tab) => {
        tab.style.display = 'none';
        tab.style.paddingBottom = '';
        tab.style.marginBottom = '';
      });

      const tablinks = sideBarContent.querySelectorAll('.tablinks');
      tablinks.forEach(
        (link) => (link.className = link.className.replace(' active', ''))
      );

      const selectedTab = sideBarContent.querySelector(`#${tabName}`);
      selectedTab.style.display = 'flex';
      evt.currentTarget.className += ' active';
    },
    closeInfobox() {
      this.$emit('close-infobox');
    },
    handleBuyAnimal(animalId) {
      if (!this.hasEnoughPoints) {
        return;
      }

      if (
        confirm('Are you sure you want to buy this animal for 1000 points?')
      ) {
        this.$emit('update-buying-animal', animalId);
        this.$emit('buy-animal', animalId);
      }
    },
    adjustOverlayBackground() {
      this.$nextTick(() => {
        const imageElement = this.$el.querySelector('.animal_image');
        if (
          !this.$refs.animalDetails ||
          !this.$refs.lastLocationWrapper ||
          !imageElement
        ) {
          console.warn('References to overlay elements not available');
          return;
        }

        this.getImageColorMetrics(imageElement, (brightness, blueRatio) => {
          let opacity = brightness > 128 ? 0.75 : 0.6; // Increased base opacity
          if (blueRatio > 0.3) {
            opacity -= 0.1; // Smaller reduction if the image is blue-dominant
          }
          const overlayBackground = `rgba(31, 88, 174, ${opacity})`; // #1F58AE with calculated opacity
          this.$refs.animalDetails.style.backgroundColor = overlayBackground;
          this.$refs.lastLocationWrapper.style.backgroundColor =
            overlayBackground;
        });
      });
    },
    getImageColorMetrics(image, callback) {
      const canvas = document.createElement('canvas');
      canvas.width = image.naturalWidth;
      canvas.height = image.naturalHeight;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight);

      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      let totalBrightness = 0;
      let totalBlue = 0;
      let pixelCount = imageData.data.length / 4;

      for (let i = 0; i < imageData.data.length; i += 4) {
        const r = imageData.data[i];
        const g = imageData.data[i + 1];
        const b = imageData.data[i + 2];

        totalBrightness += (r * 299 + g * 587 + b * 114) / 1000;
        totalBlue += b;
      }

      const avgBrightness = totalBrightness / pixelCount;
      const blueRatio = totalBlue / (pixelCount * 255); // Ratio of blue across all pixels

      callback(avgBrightness, blueRatio);
    },
    getPreferredDistanceUnit() {
      const userLocale = navigator.language || navigator.userLanguage;
      const imperialCountries = ['US', 'LR', 'MM'];
      const country = userLocale.split('-')[1]; // Get country code from locale

      return imperialCountries.includes(country) ? 'miles' : 'km';
    },
    getPreferredSpeedUnit() {
      return this.getPreferredDistanceUnit() === 'miles' ? 'mph' : 'km/h';
    },
    formatDate(dateString) {
      const userLocale = navigator.language || navigator.userLanguage;
      const date = new Date(dateString);

      return new Intl.DateTimeFormat(userLocale, {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      }).format(date);
    },
  },
  mounted() {
    if (this.animal.picture) {
      this.adjustOverlayBackground();
    }
  },
};
